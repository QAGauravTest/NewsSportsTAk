package pageObjects;

import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.asserts.SoftAssert;

public class HomePage {
	
	WebDriver driver;
	WebDriverWait wait ;
	
	public HomePage(WebDriver driver) {
		this.driver = driver;
		PageFactory.initElements(driver, this);
	}
	
	
	
	
	@FindBy(xpath = "//span[contains(text(),'Hi')]")
	WebElement Select_Hindi_language;
	
	@FindBy(xpath = "//span[contains(text(),'Eng')]")
	WebElement Select_English_language;
	
	@FindBy(xpath = "//span[contains(text(),'Dark')]" )
	public WebElement Dark_Theme;
	
	@FindBy(xpath = "//span[contains(text(),'Light')]" )
	public WebElement Light_Theme;
	
	@FindBy( xpath= "//button/span[contains(text(),'Cricket')]" )
	public
	WebElement Home_Page_Cricket;

	
	@FindBy( tagName="a" )
	public List<WebElement> Home_Page_Links;
	
	
		public void  switch_Language_To_Hindi(WebDriver driver)
		{
		    Actions a = new Actions(driver);
			Duration time = Duration.ofSeconds(30);
			wait = new WebDriverWait(driver, time);

			wait.until(ExpectedConditions.visibilityOf(Select_Hindi_language));

			wait.until(ExpectedConditions.visibilityOf(Select_Hindi_language));

			if (Select_Hindi_language.isDisplayed() == true) 
			{
				a.moveToElement(Select_Hindi_language)
				   .pause(Duration.ofSeconds(2)).click().build().perform();
			}
		
		}
		
		
		
		public void switch_Language_ToEnglish(WebDriver driver)
		{
			Actions a = new Actions(driver);
			Duration time = Duration.ofSeconds(30);
			wait = new WebDriverWait(driver, time);

			wait.until(ExpectedConditions.visibilityOf(Select_English_language));

			if (Select_English_language.isDisplayed() == true) 
			{
				a.moveToElement(Select_English_language)
				   .pause(Duration.ofSeconds(2)).click().build().perform();
			}
		}
	

		
		public void switch_to_Dark_Theme(WebDriver driver) {

			if (Dark_Theme.isDisplayed() == true) {
				Dark_Theme.click();
			}
		}
		
		public void switch_to_Light_Theme(WebDriver driver) {

			if (Light_Theme.isDisplayed() == true) {
				Light_Theme.click();
			}
		}
		
		
		
		public void validate_BrokenLink_HomePage() throws Throwable
		{

		SoftAssert a = new SoftAssert();
		for (WebElement link : Home_Page_Links)
		{
			link.click();
			Thread.sleep(3000);
			
			String url = link.getAttribute("href");
			HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
			conn.setRequestMethod("HEAD");
			conn.connect();
			int respCode = conn.getResponseCode();
			System.out.println(respCode);
			a.assertTrue(respCode < 400, "The link with Text" + link.getText() + " is broken with code" + respCode);
			driver.navigate().back();
			Thread.sleep(3000);
			
		}
		a.assertAll();
		}
	

}
