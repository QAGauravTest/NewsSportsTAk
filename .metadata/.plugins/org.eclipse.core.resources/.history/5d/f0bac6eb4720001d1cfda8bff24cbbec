package pageObjects;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.asserts.SoftAssert;

public class CricketTab {
	WebDriver driver;
	WebDriverWait wait ;
	
	public CricketTab(WebDriver driver) {
		this.driver = driver;
		PageFactory.initElements(driver, this);
	}
	
	
	@FindBy( xpath= "(//h2[contains(@class,'MuiTypography')]/parent::a)" )
	public List<WebElement> Home_Page_ALL_URLs;
	
	@FindBy( xpath ="((//div[@role='tablist'])[2]/button)[3]")
	public WebElement ThirdPage;
	
	
	public boolean validate_BrokenLink() throws InterruptedException
	{
//		boolean valid_URL_or_Not = true ;
//		    String homePage = URL_to_check ;
//	        String url = URL_to_check ;
//	        HttpURLConnection huc = null;
//	        int respCode = 200;
//	        String parentWindow = driver.getWindowHandle();
//	        this.driver = driver;
//	        driver.switchTo().newWindow(WindowType.WINDOW.TAB);
//	    	  
//	         driver.get(homePage);
//	        
//	        //    Thread.sleep(4000);
//	            System.out.println("Validating below URL :-\n" + url + "\n");
//	        
//	            if(url == null || url.isEmpty()){
//	                System.out.println("URL is either not configured for anchor tag or it is empty");
//	                valid_URL_or_Not = false ;
//	            }
//	            
//	            if(!url.startsWith(homePage)){
//	                System.out.println("URL belongs to other domain");
//	                valid_URL_or_Not = false ;
//	            }
//	            
//	            try {
//	                huc = (HttpURLConnection)(new URL(url).openConnection());
//	                huc.setRequestMethod("HEAD");
//	                huc.connect();
//	                respCode = huc.getResponseCode();
//	                
//	                if(respCode >= 400){
//	                    valid_URL_or_Not = false ;
//	                }
//	                    
//	            } catch (MalformedURLException e) {
//	                // TODO Auto-generated catch block
//	                e.printStackTrace();
//	            } catch (IOException e) {
//	                // TODO Auto-generated catch block
//	                e.printStackTrace();
//	            }
//	            Thread.sleep(2000);
//	            driver.close();
//	            Thread.sleep(2000);
//	            driver.switchTo().window(parentWindow);
//	            Thread.sleep(2000);
//	            return valid_URL_or_Not ;
//	        }
	
	
	List<WebElement> links = driver.findElements(By.cssSelector("li[class='gf-li'] a"));

	SoftAssert a = new SoftAssert();

	for (WebElement link : links)

	{

		String url = link.getAttribute("href");

		HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();

		conn.setRequestMethod("HEAD");

		conn.connect();
		
		

		int respCode = conn.getResponseCode();

		System.out.println(respCode);

		a.assertTrue(respCode < 400, "The link with Text" + link.getText() + " is broken with code" + respCode);

	}

	a.assertAll();// This step is mandatory to invoke All soft assertion
	driver.close();
	
	
	

}
